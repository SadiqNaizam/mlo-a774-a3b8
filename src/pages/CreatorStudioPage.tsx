import React, { useState } from 'react';

// Custom Layout Components
import Header from '@/components/layout/Header';
import Sidebar from '@/components/layout/Sidebar';
import Footer from '@/components/layout/Footer';

// Custom Domain Components
import CreatorVideoListItem from '@/components/CreatorVideoListItem';

// Shadcn/UI Components
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";

// react-hook-form and Zod
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

// Lucide Icons
import { UploadCloud, ListVideo, BarChart2 } from 'lucide-react';
import { cn } from '@/lib/utils';

// Form Schema for Video Upload
const videoUploadFormSchema = z.object({\n  title: z.string().min(3, "Title must be at least 3 characters.").max(100, "Title can be at most 100 characters."),\n  description: z.string().max(5000, "Description can be at most 5000 characters.").optional(),\n  videoFile: z.custom<FileList>()\n    .refine(files => files && files.length > 0, "A video file is required.")\n    .refine(files => files && files[0]?.size <= 100 * 1024 * 1024, "Video file size must be less than 100MB.") // Example size validation\n    .refine(files => files && ['video/mp4', 'video/webm', 'video/quicktime'].includes(files[0]?.type), "Unsupported video format."), // Example type validation\n  thumbnailFile: z.custom<FileList>()\n    .refine(files => files && files.length > 0, "A thumbnail image is required.")\n    .refine(files => files && files[0]?.size <= 5 * 1024 * 1024, "Thumbnail file size must be less than 5MB.")\n    .refine(files => files && ['image/jpeg', 'image/png', 'image/webp'].includes(files[0]?.type), "Unsupported image format.").optional(),\n  visibility: z.enum([\"PUBLIC\", \"PRIVATE\", \"UNLISTED\"]).default(\"PUBLIC\"),\n  tags: z.string().optional().describe("Comma-separated tags for discoverability"),\n});\ntype VideoUploadFormValues = z.infer<typeof videoUploadFormSchema>;\n\n// Sample Data for Managed Videos
interface ManagedVideo {\n  videoId: string;\n  thumbnailUrl: string;\n  title: string;\n  views: number;\n  likes: number;\n  comments: number;\n  visibility: 'Public' | 'Private' | 'Unlisted';\n  uploadDate: string;\n}\n\nconst sampleManagedVideos: ManagedVideo[] = [\n  { videoId: 'vid001', thumbnailUrl: 'https://source.unsplash.com/random/160x90?v=1&sig=1', title: 'My First Vlogging Adventure', views: 12560, likes: 1200, comments: 85, visibility: 'Public', uploadDate: '3 days ago' },\n  { videoId: 'vid002', thumbnailUrl: 'https://source.unsplash.com/random/160x90?v=1&sig=2', title: 'Tutorial: Advanced Coding Techniques', views: 88000, likes: 4500, comments: 230, visibility: 'Public', uploadDate: '1 week ago' },\n  { videoId: 'vid003', thumbnailUrl: 'https://source.unsplash.com/random/160x90?v=1&sig=3', title: 'Unlisted Test - Beta Features', views: 150, likes: 10, comments: 3, visibility: 'Unlisted', uploadDate: '2 hours ago' },\n  { videoId: 'vid004', thumbnailUrl: 'https://source.unsplash.com/random/160x90?v=1&sig=4', title: 'Private Family Vacation Montage', views: 5, likes: 2, comments: 0, visibility: 'Private', uploadDate: '5 days ago' },\n];\n\nconst CreatorStudioPage: React.FC = () => {\n  console.log('CreatorStudioPage loaded');\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n\n  const form = useForm<VideoUploadFormValues>({\n    resolver: zodResolver(videoUploadFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      visibility: \"PUBLIC\",\n      tags: \"\",\n      videoFile: undefined,\n      thumbnailFile: undefined,\n    },\n  });\n\n  const onUploadSubmit = (data: VideoUploadFormValues) => {\n    console.log(\"Video Upload Submitted:\", {\n        ...data,\n        videoFile: data.videoFile[0]?.name, // Log file name for brevity\n        thumbnailFile: data.thumbnailFile?.[0]?.name, // Log file name for brevity\n    });\n    // In a real app, handle file uploads (e.g., to a backend service)\n    alert(`Mock Upload: Video \"${data.title}\" submitted. Check console for details.`);\n    form.reset();\n  };\n\n  // Placeholder handlers for video list items\n  const handleEditVideo = (videoId: string) => {\n    console.log(\"Edit video:\", videoId);\n    alert(`Triggered edit for video ID: ${videoId} (mock)`);\n  };\n  const handleDeleteVideo = (videoId: string) => {\n    console.log(\"Delete video:\", videoId);\n    if (window.confirm(`Are you sure you want to delete video ID: ${videoId}? (mock)`)) {\n        alert(`Video ID: ${videoId} deleted (mock)`);\n    }\n  };\n  const handleViewAnalytics = (videoId: string) => {\n    console.log(\"View analytics for video:\", videoId);\n    alert(`Navigating to analytics for video ID: ${videoId} (mock)`);\n  };\n  const handlePreviewVideo = (videoId: string) => {\n    console.log(\"Preview video:\", videoId);\n    // Example: open in new tab, similar to YouTube's \"View on YouTube\"\n    window.open(`/video-watch?v=${videoId}`, '_blank');\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background text-foreground\">\n      <Header />\n      <div className=\"flex flex-1\">\n        <Sidebar isCollapsed={isSidebarCollapsed} onToggleCollapse={() => setIsSidebarCollapsed(!isSidebarCollapsed)} />\n        <main className={cn(\n          \"flex-1 pt-16 transition-all duration-300 ease-in-out\",\n          isSidebarCollapsed ? \"md:pl-20\" : \"md:pl-64\"\n        )}>\n          <ScrollArea className=\"h-[calc(100vh-4rem)]\"> {/* Header is 4rem (h-16) */}\n            <div className=\"p-4 sm:p-6 lg:p-8\">\n              <h1 className=\"text-2xl sm:text-3xl font-bold tracking-tight text-foreground mb-6\">Creator Studio</h1>\n              \n              <Tabs defaultValue=\"upload\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-3 max-w-lg mb-6\">\n                  <TabsTrigger value=\"upload\" className=\"text-xs sm:text-sm\">\n                    <UploadCloud className=\"mr-1.5 h-4 w-4\" /> Upload Video\n                  </TabsTrigger>\n                  <TabsTrigger value=\"manage\" className=\"text-xs sm:text-sm\">\n                    <ListVideo className=\"mr-1.5 h-4 w-4\" /> Manage Videos\n                  </TabsTrigger>\n                  <TabsTrigger value=\"analytics\" className=\"hidden md:flex text-xs sm:text-sm\">\n                    <BarChart2 className=\"mr-1.5 h-4 w-4\" /> Analytics\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"upload\">\n                  <Card className=\"max-w-2xl mx-auto\">\n                    <CardHeader>\n                      <CardTitle>Upload New Video</CardTitle>\n                      <CardDescription>Fill in the details below to upload your video to the platform.</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <Form {...form}>\n                        <form onSubmit={form.handleSubmit(onUploadSubmit)} className=\"space-y-6\">\n                          <FormField\n                            control={form.control}\n                            name=\"title\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Video Title</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., My Awesome Vlog Episode 1\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"description\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Description</FormLabel>\n                                <FormControl>\n                                  <Textarea placeholder=\"Tell viewers about your video...\" className=\"min-h-[100px]\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"videoFile\"\n                            render={({ field: { onChange, value, ...rest } }) => ( // value is excluded here to prevent issues with Input type file\n                              <FormItem>\n                                <FormLabel>Video File</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"file\" \n                                    accept=\"video/mp4,video/webm,video/quicktime\" \n                                    onChange={(e) => onChange(e.target.files)} \n                                    {...rest} \n                                    className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20\"\n                                  />\n                                </FormControl>\n                                <FormDescription>MP4, WebM, MOV. Max 100MB.</FormDescription>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"thumbnailFile\"\n                            render={({ field: { onChange, value, ...rest } }) => (\n                              <FormItem>\n                                <FormLabel>Thumbnail Image (Optional)</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"file\" \n                                    accept=\"image/jpeg,image/png,image/webp\" \n                                    onChange={(e) => onChange(e.target.files)} \n                                    {...rest}\n                                    className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20\"\n                                  />\n                                </FormControl>\n                                <FormDescription>JPG, PNG, WebP. Max 5MB.</FormDescription>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"visibility\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Visibility</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select video visibility\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"PUBLIC\">Public</SelectItem>\n                                    <SelectItem value=\"UNLISTED\">Unlisted</SelectItem>\n                                    <SelectItem value=\"PRIVATE\">Private</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"tags\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Tags (Optional)</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., gaming, tutorial, vlog\" {...field} />\n                                </FormControl>\n                                <FormDescription>Comma-separated keywords to help viewers find your video.</FormDescription>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <Button type=\"submit\" className=\"w-full sm:w-auto\" disabled={form.formState.isSubmitting}>\n                            {form.formState.isSubmitting ? \"Uploading...\" : \"Upload Video\"}\n                          </Button>\n                        </form>\n                      </Form>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"manage\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Manage Your Videos</CardTitle>\n                      <CardDescription>Edit, delete, or view analytics for your uploaded videos.</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-0 p-0\"> {/* Remove CardContent padding if list items have their own */}\n                      {sampleManagedVideos.length > 0 ? (\n                        <div className=\"divide-y divide-border\">\n                            {sampleManagedVideos.map((video) => (\n                            <CreatorVideoListItem\n                                key={video.videoId}\n                                videoId={video.videoId}\n                                thumbnailUrl={video.thumbnailUrl}\n                                title={video.title}\n                                views={video.views}\n                                likes={video.likes}\n                                comments={video.comments}\n                                visibility={video.visibility}\n                                uploadDate={video.uploadDate}\n                                onEdit={handleEditVideo}\n                                onDelete={handleDeleteVideo}\n                                onViewAnalytics={handleViewAnalytics}\n                                onPreview={handlePreviewVideo}\n                            />\n                            ))}\n                        </div>\n                      ) : (\n                        <p className=\"p-6 text-center text-muted-foreground\">You haven't uploaded any videos yet.</p>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n                \n                <TabsContent value=\"analytics\">\n                   <Card>\n                    <CardHeader>\n                      <CardTitle>Channel Analytics</CardTitle>\n                      <CardDescription>Overview of your channel's performance (Placeholder).</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-center py-10\">\n                            <BarChart2 className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                            <p className=\"text-muted-foreground\">Detailed channel analytics will be available here soon.</p>\n                            <p className=\"text-sm text-muted-foreground mt-2\">Track views, watch time, subscriber growth, and more.</p>\n                             <img src=\"https://assets-global.website-files.com/5fba247ff408b767ed9ab38c/6227345527c8bfc5a1A57A0c_Group-48095497.png\" alt=\"Sample Analytics Chart\" className=\"mt-6 rounded-lg shadow-md mx-auto max-w-xl\" />\n                        </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </ScrollArea>\n        </main>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default CreatorStudioPage;