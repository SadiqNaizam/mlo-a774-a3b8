import React, { useState, useEffect, useMemo } from 'react';
import { useSearchParams } from 'react-router-dom';

import Header from '@/components/layout/Header';
import Sidebar from '@/components/layout/Sidebar';
import Footer from '@/components/layout/Footer';
import VideoThumbnailItem from '@/components/VideoThumbnailItem';

import { ScrollArea } from '@/components/ui/scroll-area';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from '@/components/ui/pagination';
import { Loader2, Search as SearchIcon } from 'lucide-react';
import { cn } from '@/lib/utils';

interface MockVideo {\n  videoId: string;\n  thumbnailUrl: string;\n  videoDuration?: string;\n  title: string;\n  channelName: string;\n  channelAvatarUrl?: string;\n  viewCount: string;\n  uploadDate: string;\n}\n\nconst MOCK_VIDEO_RESULTS_TEMPLATE: MockVideo[] = Array.from({ length: 28 }, (_, i) => ({\n  videoId: `search_vid_${i + 1}`,\n  thumbnailUrl: `https://picsum.photos/seed/${i + 1}_search_result/320/180`,\n  videoDuration: `${Math.floor(Math.random() * 10) + 3}:${String(Math.floor(Math.random() * 60)).padStart(2, '0')}`,\n  title: `Found: Video Result Title Example ${i + 1} - Learn about topic ${i % 5 +1}`,\n  channelName: `Creator Channel ${i % 4 + 1}`,\n  channelAvatarUrl: `https://i.pravatar.cc/40?u=channel_search_${i % 4 + 1}`,\n  viewCount: `${(Math.random() * 5 + 0.1).toFixed(1)}M views`,\n  uploadDate: `${Math.floor(Math.random() * 6) + 1} days ago`,\n}));\n\nconst getPaginationItems = (currentPage: number, totalPages: number): (number | '...')[] => {\n    const delta = 1; // Number of pages to show around the current page\n    const rangeWithDots: (number | '...')[] = [];\n\n    // Always show the first page\n    rangeWithDots.push(1);\n\n    // Determine intermediate pages and dots\n    let left = Math.max(2, currentPage - delta);\n    let right = Math.min(totalPages - 1, currentPage + delta);\n\n    if (currentPage - delta > 2) {\n        rangeWithDots.push('...');\n    }\n\n    for (let i = left; i <= right; i++) {\n        rangeWithDots.push(i);\n    }\n\n    if (currentPage + delta < totalPages - 1) {\n        rangeWithDots.push('...');\n    }\n    \n    // Always show the last page if totalPages > 1\n    if (totalPages > 1) {\n        rangeWithDots.push(totalPages);\n    }\n    \n    // Deduplicate (e.g., if 1 is also in the range or totalPages is small)\n    const uniqueRange = rangeWithDots.filter((item, index, self) => {\n        return !(item === '...' && self[index -1] === '...'); // no consecutive ellipsis\n    });\n    \n    // Remove potential duplicate if totalPages=1 and range includes 1 twice\n    if (totalPages === 1 && uniqueRange.length > 1 && uniqueRange[uniqueRange.length-1] === 1) {\n        return [1];\n    }\n    \n    // Further clean up: if 1 ... 2, remove ...\n    if (uniqueRange[0] === 1 && uniqueRange[1] === '...' && uniqueRange[2] === 2) {\n      uniqueRange.splice(1, 1);\n    }\n    // if N-1 ... N, remove ...\n    if (uniqueRange[uniqueRange.length-3] === totalPages-1 && uniqueRange[uniqueRange.length-2] === '...' && uniqueRange[uniqueRange.length-1] === totalPages) {\n      uniqueRange.splice(uniqueRange.length-2, 1);\n    }\n\n    return uniqueRange;\n};\n\n\nconst SearchResultsPage: React.FC = () => {\n  console.log('SearchResultsPage loaded');\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10; // Number of videos per page\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [filteredResults, setFilteredResults] = useState<MockVideo[]>([]);\n  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    // Simulate API call and filtering\n    setTimeout(() => {\n      if (query) {\n        const results = MOCK_VIDEO_RESULTS_TEMPLATE.filter(video =>\n          video.title.toLowerCase().includes(query.toLowerCase()) ||\n          video.channelName.toLowerCase().includes(query.toLowerCase())\n        );\n        setFilteredResults(results);\n      } else {\n        setFilteredResults([]);\n      }\n      setCurrentPage(1); // Reset to first page on new search\n      setIsLoading(false);\n    }, 700); // Simulate network delay\n  }, [query]);\n\n  const totalPages = Math.ceil(filteredResults.length / itemsPerPage);\n  \n  const currentVideos = useMemo(() => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return filteredResults.slice(startIndex, endIndex);\n  }, [filteredResults, currentPage, itemsPerPage]);\n\n  const handlePageChange = (page: number) => {\n    if (page >= 1 && page <= totalPages) {\n      setCurrentPage(page);\n      // Optionally scroll to top of results or page\n      // window.scrollTo({ top: 0, behavior: 'smooth' }); \n    }\n  };\n\n  const paginationItems = useMemo(() => getPaginationItems(currentPage, totalPages), [currentPage, totalPages]);\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background text-foreground\">\n      <Header />\n      <div className=\"flex flex-1\">\n        <Sidebar isCollapsed={isSidebarCollapsed} onToggleCollapse={() => setIsSidebarCollapsed(!isSidebarCollapsed)} />\n        <ScrollArea className={cn(\n          \"flex-1 pt-16 transition-all duration-300 ease-in-out\",\n          isSidebarCollapsed ? \"md:pl-20\" : \"md:pl-64\"\n        )}> \n          <main className=\"container mx-auto px-4 py-6 sm:px-6 lg:px-8\">\n            {isLoading ? (\n              <div className=\"flex justify-center items-center h-96\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />\n                <p className=\"ml-4 text-muted-foreground\">Loading search results...</p>\n              </div>\n            ) : !query ? (\n              <div className=\"flex justify-center items-center h-96\">\n                <Alert variant=\"default\" className=\"max-w-lg text-center\">\n                  <SearchIcon className=\"h-5 w-5\" />\n                  <AlertTitle className=\"font-semibold\">No Search Query Provided</AlertTitle>\n                  <AlertDescription>\n                    Please use the search bar at the top to find videos.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            ) : filteredResults.length === 0 ? (\n              <div className=\"flex flex-col items-center justify-center h-96 text-center\">\n                 <SearchIcon className=\"h-16 w-16 text-muted-foreground mb-4\" />\n                <h2 className=\"text-2xl font-semibold mb-2\">No results found for \"{query}\"</h2>\n                <p className=\"text-muted-foreground\">\n                  Try searching for something else, or check your spelling.\n                </p>\n              </div>\n            ) : (\n              <>\n                <div className=\"mb-6\">\n                  <h1 className=\"text-2xl sm:text-3xl font-bold\">\n                    Search Results for: <span className=\"text-primary\">{query}</span>\n                  </h1>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Showing {currentVideos.length} of {filteredResults.length} results. Page {currentPage} of {totalPages}.\n                  </p>\n                </div>\n\n                {/* Placeholder for potential filter/sort options */}\n                {/* \n                <div className=\"mb-6 p-4 border rounded-lg bg-card shadow-sm\">\n                  <h3 className=\"text-lg font-semibold mb-2\">Filter & Sort</h3>\n                  <p className=\"text-sm text-muted-foreground\">Advanced filtering and sorting options could be placed here.</p>\n                </div>\n                */}\n\n                <div className=\"grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5\">\n                  {currentVideos.map((video) => (\n                    <VideoThumbnailItem key={video.videoId} {...video} />\n                  ))}\n                </div>\n\n                {totalPages > 1 && (\n                  <div className=\"mt-8 flex justify-center\">\n                    <Pagination>\n                      <PaginationContent>\n                        <PaginationItem>\n                          <PaginationPrevious\n                            href=\"#\"\n                            onClick={(e) => { e.preventDefault(); handlePageChange(currentPage - 1); }}\n                            className={currentPage === 1 ? 'pointer-events-none opacity-60' : undefined}\n                            aria-disabled={currentPage === 1}\n                          />\n                        </PaginationItem>\n                        {paginationItems.map((page, index) => (\n                          <PaginationItem key={index}>\n                            {page === '...' ? (\n                              <PaginationEllipsis />\n                            ) : (\n                              <PaginationLink\n                                href=\"#\"\n                                onClick={(e) => { e.preventDefault(); handlePageChange(page as number); }}\n                                isActive={currentPage === page}\n                              >\n                                {page}\n                              </PaginationLink>\n                            )}\n                          </PaginationItem>\n                        ))}\n                        <PaginationItem>\n                          <PaginationNext\n                            href=\"#\"\n                            onClick={(e) => { e.preventDefault(); handlePageChange(currentPage + 1); }}\n                            className={currentPage === totalPages ? 'pointer-events-none opacity-60' : undefined}\n                            aria-disabled={currentPage === totalPages}\n                          />\n                        </PaginationItem>\n                      </PaginationContent>\n                    </Pagination>\n                  </div>\n                )}\n              </>\n            )}\n          </main>\n        </ScrollArea>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default SearchResultsPage;